using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqTask3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Hospital hospital = new Hospital();
            hospital.Administrate();
        }
    }

    public class Hospital
    {
        private List<Patient> _patients;

        public Hospital()
        {
            _patients = new List<Patient>()
            {
                new Patient("Иванов", "Иван", "Иванович", 34,"Грипп"),
                new Patient("Петров", "Пётр", "Петрович", 27, "ОРВИ"),
                new Patient("Семёнов", "Семён", "Семёнович", 19, "ОРВИ"),
                new Patient("Нурсултанов", "Нурсултан", "Нурсултанович", 24, "Грипп"),
                new Patient("Васильев", "Василий", "Васильевич", 30, "Гонорея"),
                new Patient("Игнатенко", "Игнат", "Игнатьевич", 28, "Гонорея"),
                new Patient("Жмышенко", "Валерий", "Альбертович", 54, "ОРВИ"),
                new Patient("Шмурдяк", "Анатолий", "Григорьевич", 24, "Грипп"),
                new Patient("Валерьев", "Валерий", "Валерьевич", 39, "Грипп"),
                new Patient("Александров", "Александр", "Александрович", 32, "ОРВИ")
            };
        }

        public void Administrate()
        {
            const string CommandSortPatientsBySecondname = "1";
            const string CommandSortPatientsByName = "2";
            const string CommandSortPatientsBySurname = "3";
            const string CommandSortPatientsByAge = "4";
            const string CommandShowPatientsWithDisease = "5";
            const string CommandExit = "6";

            bool isContinue = true;

            while (isContinue)
            {
                Console.WriteLine($"Вы можете выбрать одну из следующих команд:" +
                    $"\n{CommandSortPatientsBySecondname} - сортировать пациентов по фамилии" +
                    $"\n{CommandSortPatientsByName} - сортировать пациентов по имени" +
                    $"\n{CommandSortPatientsBySurname} - сортировать пациентов по отчеству" +
                    $"\n{CommandSortPatientsByAge} - сортировать пациентов по возрасту" +
                    $"\n{CommandShowPatientsWithDisease} - показать пациентов с определённой болезнью" +
                    $"\n{CommandExit} - выйти из программы\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandSortPatientsBySecondname:
                        SortPatientsBySecondName();
                        break;

                    case CommandSortPatientsByName:
                        SortPatientsByName();
                        break;

                    case CommandSortPatientsBySurname:
                        SortPatientsBySurname();
                        break;

                    case CommandSortPatientsByAge:
                        SortPatientsByAge();
                        break;

                    case CommandShowPatientsWithDisease:
                        ShowPatientsWithDisease();
                        break;

                    case CommandExit:
                        isContinue = false;
                        break;
                }

                if (isContinue)
                {
                    Console.WriteLine("Для продолжения нажмите любую клавишу");
                    Console.ReadKey();
                    Console.Clear();
                }
            }

            Console.WriteLine("Вы вышли из программы");
        }

        private void SortPatientsBySecondName()
        {
            List<Patient> patients = _patients.ToList();
            List<Patient> sortedPatients = patients.OrderBy(patient => patient.Secondname).ToList();

            foreach (Patient patient in sortedPatients)
                patient.ShowInfo();
        }

        private void SortPatientsByName()
        {
            List<Patient> patients = _patients.ToList();
            List<Patient> sortedPatients = patients.OrderBy(patient => patient.Name).ToList();

            foreach (Patient patient in sortedPatients)
                patient.ShowInfo();
        }

        private void SortPatientsBySurname()
        {
            List<Patient> patients = _patients.ToList();
            List<Patient> sortedPatients = patients.OrderBy(patient => patient.Surname).ToList();

            foreach (Patient patient in sortedPatients)
                patient.ShowInfo();
        }

        private void SortPatientsByAge()
        {
            List<Patient> patients = _patients.ToList();
            List<Patient> sortedPatients = patients.OrderBy(patient => patient.Age).ToList();

            foreach (Patient patient in sortedPatients)
                patient.ShowInfo();
        }

        private void ShowPatientsWithDisease()
        {
            Console.WriteLine("Введите название болезни");
            string inputedDisease = Console.ReadLine();
            List<Patient> patients = _patients.ToList();
            List<Patient> sortedPatients = patients.Where(patient => patient.Disease.ToLower() == inputedDisease.ToLower()).ToList();
            Console.Clear();

            if (sortedPatients.Count == 0)
            {
                Console.WriteLine("Пациенты с такой болезнью не найдены");
                return;
            }

            Console.WriteLine("С данной болезнью найдены следующие пациенты:\n");

            foreach (Patient patient in sortedPatients)
                patient.ShowInfo();
        }
    }

    public class Patient
    {
        public Patient(string secondname, string name, string surname, int age, string disease)
        {
            Secondname = secondname;
            Name = name;
            Surname = surname;
            Age = age;
            Disease = disease;
        }

        public string Secondname { get; private set; }
        public string Name { get; private set; }
        public string Surname { get; private set; }
        public int Age { get; private set; }
        public string Disease { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"{Secondname} {Name} {Surname}\nвозраст - {Age}\nзаболевание - {Disease}\n\n");
        }
    }
}
